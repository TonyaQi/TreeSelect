{"ast":null,"code":"var _jsxFileName = \"/Users/qitong/\\u7EC3\\u4E60/TreeSelect/src/TreeSelect/index.js\";\nimport React from 'react';\nimport { Checkbox } from 'antd';\nimport { DownOutlined, RightOutlined } from '@ant-design/icons';\nimport clone from '../utils/index';\n\nclass TreeSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleExpand = (node, expand) => {\n      node.expand = expand;\n      this.forceUpdate();\n    };\n\n    this.makeChildren = (node, checked) => {\n      if (node.children) {\n        for (let i = 0; i < node.children.length; i++) {\n          node.checked = checked;\n          this.makeChildren(node.children[i], checked);\n        }\n      }\n    };\n\n    this.setNodeStatus = (node, checked) => {\n      node.checked = checked;\n      this.forceUpdate();\n    };\n\n    this.generateTree = (data, lastNode) => {\n      if (!data || data.length < 1) return null;\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        style: {\n          display: !lastNode || lastNode.expand ? 'block' : 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      }, data.map(item => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }\n        }, Array.isArray(item.children) ? item.expand ? /*#__PURE__*/React.createElement(DownOutlined, {\n          onClick: () => this.toggleExpand(item, !item.expand),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 33\n          }\n        }) : /*#__PURE__*/React.createElement(RightOutlined, {\n          onClick: () => this.toggleExpand(item, !item.expand),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 35\n          }\n        }) : null, /*#__PURE__*/React.createElement(Checkbox, {\n          checked: item.checked,\n          indeterminate: item.indeterminate,\n          onChange: () => this.setNodeStatus(item, !item.checked),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }\n        }, item.title), this.generateTree(item.children, item));\n      }));\n    };\n\n    this.data = clone(props.data);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, this.generateTree(this.data));\n  }\n\n}\n\n;\nTreeSelect.propTypes = {\n  allowClear: Boolean,\n  placeholder: String,\n  searchPlaceholder: String,\n  showCheckedStrategy: String,\n  dropDownStyle: Object,\n  style: Object,\n  treeData: Array,\n  value: Array,\n  searchRange: Array,\n  onChange: Function,\n  filterTreeNode: Function\n};\nexport default TreeSelect;","map":{"version":3,"sources":["/Users/qitong/练习/TreeSelect/src/TreeSelect/index.js"],"names":["React","Checkbox","DownOutlined","RightOutlined","clone","TreeSelect","Component","constructor","props","toggleExpand","node","expand","forceUpdate","makeChildren","checked","children","i","length","setNodeStatus","generateTree","data","lastNode","display","map","item","Array","isArray","indeterminate","title","render","propTypes","allowClear","Boolean","placeholder","String","searchPlaceholder","showCheckedStrategy","dropDownStyle","Object","style","treeData","value","searchRange","onChange","Function","filterTreeNode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Checkbox} from 'antd';\nimport {DownOutlined, RightOutlined} from '@ant-design/icons';\nimport clone from '../utils/index';\n\nclass TreeSelect extends React.Component{\n    \n    constructor(props) {\n        super(props);\n        this.data = clone(props.data);\n    }\n\n\n    toggleExpand = (node, expand) => {\n        node.expand = expand;\n        this.forceUpdate();\n    }\n\n    makeChildren = (node, checked) => {\n        if(node.children) {\n            for(let i = 0; i<node.children.length; i++) {\n                node.checked = checked;\n                this.makeChildren(node.children[i], checked)\n            }\n        }\n    }\n\n    setNodeStatus = (node, checked) => {\n        node.checked = checked;\n        \n        this.forceUpdate();\n    }\n\n    generateTree = (data, lastNode) => {\n        if(!data || data.length < 1) return null;\n        return (\n            <ul \n                style={{\n                    display: (!lastNode || lastNode.expand) ? 'block' : 'none'\n                }}\n            >\n                {\n                    data.map(item => {\n                        return (\n                            <li>\n                            {\n                                Array.isArray(item.children) \n                                ? item.expand ? \n                                <DownOutlined onClick={() => this.toggleExpand(item, !item.expand)}/>\n                                : <RightOutlined onClick={() => this.toggleExpand(item, !item.expand)}/>\n                                : null\n                            }\n                            <Checkbox\n                                checked={item.checked}\n                                indeterminate={item.indeterminate}\n                                onChange={() => this.setNodeStatus(item, !item.checked)}\n                            >\n                                {item.title}\n                            </Checkbox>\n                            {\n                                this.generateTree(item.children, item)\n                            }\n                        </li>\n                        )\n                    })\n                }\n            </ul>\n        )\n    };\n\n    render(){\n        return (\n            <div>\n                {\n                    this.generateTree(this.data)\n                }\n            </div>\n        )\n    }\n};\n\nTreeSelect.propTypes = {\n    allowClear: Boolean,\n    placeholder: String,\n    searchPlaceholder: String,\n    showCheckedStrategy: String,\n    dropDownStyle: Object,\n    style: Object,\n    treeData: Array,\n    value: Array,\n    searchRange: Array,\n    onChange: Function,\n    filterTreeNode: Function\n}\nexport default TreeSelect;"]},"metadata":{},"sourceType":"module"}