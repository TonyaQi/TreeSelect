{"ast":null,"code":"var _jsxFileName = \"/Users/qitong/\\u7EC3\\u4E60/TreeSelect/src/TreeSelect/index.js\";\nimport React from 'react';\nimport { Checkbox } from 'antd';\nimport { DownOutlined, RightOutlined } from '@ant-design/icons';\nimport clone from '../utils/index';\n\nclass TreeSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getValue = (treeData, value) => {\n      const ans = [];\n      const queue = [...treeData];\n\n      while (queue.length) {\n        const top = queue.shift();\n        if (value.includes(top.value)) ans.push(top);else if (value.children && value.children[0]) queue.push(...top.children);\n      }\n\n      return ans;\n    };\n\n    this.getSelectedNodeList = (treeData, type) => {\n      const ans = [];\n      const queue = [...treeData];\n\n      while (queue.length) {\n        const top = queue.shift();\n\n        if (top.checked) {\n          ans.push(top);\n        } else if (top.indeterminate && top.children && top.children[0]) {\n          queue.push(...top.children);\n        }\n      }\n\n      switch (type) {\n        case 'SHOW_CHILD':\n          // flat\n          return function getChild(nodeList) {\n            return nodeList.reduce((acc, cur) => Array.isArray(cur.children) ? [...acc, ...getChild(cur.children)] : [...acc, cur], []);\n          }(ans);\n\n        case 'SHOW_PARENT':\n          return ans;\n\n        case 'SHOW_ALL':\n          // flat\n          return function getAll(nodeList) {\n            return nodeList.reduce((acc, cur) => Array.isArray(cur.children) ? [...acc, cur, ...getAll(cur.children)] : [...acc, cur], []);\n          }(ans);\n\n        default:\n          return ans;\n      }\n    };\n\n    this.setNodeStatus = (node, checked) => {\n      const setChildChecked = (node, checked) => {\n        if (node.children) node.children.forEach(child => setChildChecked(child, checked));\n        node.checked = checked;\n        node.indeterminate = false;\n      };\n      /**\n       * @param {Object} node 节点\n       * @description 递归向上设置父节点的选中状态，并进行相关操作（根节点选中后移除 value 中的子节点）\n       * 当前节点变更\n       * ├── 未选 -> 已选\n       * │   ├── 父节点半选 -> 半选, value.add(child)\n       * │   ├── 父节点未选 -> 半选, value.add(child)\n       * │   ├── 父节点未选 -> 已选, value.add(parent), value.remove(children)\n       * │   └── 父节点半选 -> 已选, value.add(parent), value.remove(children)\n       * └── 已选 -> 未选\n       *     ├── 父节点半选 -> 半选, value.remove(children)\n       *     ├── 父节点半选 -> 未选, value.remove(children)\n       *     ├── 父节点已选 -> 未选, value.remove(children), value.remove(parent)\n       *     └── 父节点已选 -> 半选, value.remove(children), value.remove(parent)\n       */\n\n\n      const setParentChecked = (node, checked) => {\n        let current = node;\n\n        while (current.parent) {\n          let isHalf = current.parent.children.some(item => item.checked !== checked || item.indeterminate);\n          current.parent.checked = isHalf ? false : checked;\n          current.parent.indeterminate = isHalf;\n          current = current.parent;\n        }\n      };\n\n      node.checked = checked;\n      setChildChecked(node, checked);\n      setParentChecked(node, checked);\n      const {\n        treeData\n      } = this.state;\n      const value = this.getSelectedNodeList(treeData, this.props.showCheckedStrategy);\n      this.setState({\n        treeData,\n        value\n      });\n    };\n\n    this.generateTree = treeData => {\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }\n      }, treeData.map(node => node.hit && /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 37\n        }\n      }, Array.isArray(node.children) ? node.expand ? /*#__PURE__*/React.createElement(DownOutlined, {\n        onClick: () => this.toggleExpand(node, !node.expand),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 39\n        }\n      }) : /*#__PURE__*/React.createElement(RightOutlined, {\n        onClick: () => this.toggleExpand(node, !node.expand),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 39\n        }\n      }) : null, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: node.checked,\n        indeterminate: node.indeterminate,\n        onChange: () => this.setNodeStatus(node, !node.checked),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 29\n        }\n      }, node.title), node.expand && node.children && node.children[0] && this.generateTree(node.children))));\n    };\n\n    this.state = clone({\n      treeData: props.data,\n      value: props.value,\n      dropDownVisible: false,\n      level: []\n    }); // 加工数据，parent参数指向parent\n    // checked: 是否选中\n    // expand: 是否展开\n    // hit: 是否符合筛选条件(是否显示，无筛选条件时都显示)\n    // indeterminate: 半选\n\n    this.state.treeData = this.state.treeData.map(node => {\n      const preData = (node, parent = null, deep = 0) => {\n        node.parent = parent;\n        node.hit = true;\n        node.expand = false;\n        node.checked = false;\n        node.indeterminate = false;\n        this.state.level[deep] ? this.state.level[deep].push(node) : this.state.level[deep] = [node];\n\n        if (node.children && node.children[0]) {\n          node.children.forEach(child => preData(child, node, deep + 1));\n        }\n\n        return node;\n      };\n\n      return preData(node);\n    }); // 当前选中值\n\n    this.state.value = this.getValue(this.state.treeData, this.state.value);\n  }\n\n  componentDidMount() {\n    // 进来写装备选中状态\n    console.log(this.state.value);\n    (this.state.value || []).forEach(node => {\n      this.setNodeStatus(node, true);\n    });\n  } // 取得值对应的节点\n\n\n  toggleExpand(node, expand) {\n    // 这里 不该这样的 但是我实在懒得再去遍历一次了\n    node.expand = expand;\n    const {\n      treeData\n    } = this.state;\n    this.setState({\n      treeData\n    });\n  }\n\n  render() {\n    const {\n      treeData\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, this.generateTree(treeData));\n  }\n\n}\n\n;\nTreeSelect.propTypes = {\n  allowClear: Boolean,\n  placeholder: String,\n  searchPlaceholder: String,\n  showCheckedStrategy: String,\n  dropDownStyle: Object,\n  style: Object,\n  treeData: Array,\n  value: Array,\n  searchRange: Array,\n  onChange: Function,\n  filterTreeNode: Function\n};\nexport default TreeSelect;","map":{"version":3,"sources":["/Users/qitong/练习/TreeSelect/src/TreeSelect/index.js"],"names":["React","Checkbox","DownOutlined","RightOutlined","clone","TreeSelect","Component","constructor","props","getValue","treeData","value","ans","queue","length","top","shift","includes","push","children","getSelectedNodeList","type","checked","indeterminate","getChild","nodeList","reduce","acc","cur","Array","isArray","getAll","setNodeStatus","node","setChildChecked","forEach","child","setParentChecked","current","parent","isHalf","some","item","state","showCheckedStrategy","setState","generateTree","map","hit","expand","toggleExpand","title","data","dropDownVisible","level","preData","deep","componentDidMount","console","log","render","propTypes","allowClear","Boolean","placeholder","String","searchPlaceholder","dropDownStyle","Object","style","searchRange","onChange","Function","filterTreeNode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Checkbox} from 'antd';\nimport {DownOutlined, RightOutlined} from '@ant-design/icons';\nimport clone from '../utils/index';\n\nclass TreeSelect extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state =  clone({\n            treeData: props.data,\n            value: props.value,\n            dropDownVisible: false,\n            level: []\n        })\n\n        // 加工数据，parent参数指向parent\n        // checked: 是否选中\n        // expand: 是否展开\n        // hit: 是否符合筛选条件(是否显示，无筛选条件时都显示)\n        // indeterminate: 半选\n        this.state.treeData = this.state.treeData.map(node => {\n            const preData = (node, parent = null, deep = 0) => {\n                node.parent = parent;\n                node.hit = true;\n                node.expand = false;\n                node.checked = false\n                node.indeterminate = false\n                this.state.level[deep] ? this.state.level[deep].push(node) :  this.state.level[deep] = [node]\n                if(node.children && node.children[0]) {\n                    node.children.forEach(child => preData(child, node, deep + 1));\n                }\n                return node\n            }\n\n            return preData(node);\n        })\n\n        // 当前选中值\n        this.state.value = this.getValue(this.state.treeData, this.state.value)\n    }\n\n    componentDidMount() {\n        // 进来写装备选中状态\n        console.log(this.state.value);\n        (this.state.value || []).forEach(node => {\n            this.setNodeStatus(node, true)\n        })\n    }\n\n    // 取得值对应的节点\n    getValue = (treeData, value) => {\n        const ans = [];\n        const queue = [...treeData];\n        while(queue.length) {\n            const top = queue.shift();\n            if(value.includes(top.value)) ans.push(top);\n            else if(value.children && value.children[0]) queue.push(...top.children) \n        }\n        return ans;\n    };\n\n    // 根据选中节点推出值\n    getSelectedNodeList = (treeData, type) => {\n        const ans = [];\n        const queue = [...treeData];\n        while(queue.length){\n            const top = queue.shift();\n            if(top.checked) {\n                ans.push(top);\n            } else if(top.indeterminate && top.children && top.children[0]) {\n                queue.push(...top.children);\n            }\n        }\n\n        switch (type) {\n            case 'SHOW_CHILD':\n              // flat\n              return (function getChild (nodeList) {\n                return nodeList.reduce(\n                  (acc, cur) =>\n                    Array.isArray(cur.children)\n                      ? [...acc, ...getChild(cur.children)]\n                      : [...acc, cur]\n                  , [])\n              }(ans))\n            case 'SHOW_PARENT':\n              return ans\n            case 'SHOW_ALL':\n              // flat\n              return (function getAll (nodeList) {\n                return nodeList.reduce(\n                  (acc, cur) =>\n                    Array.isArray(cur.children)\n                      ? [...acc, cur, ...getAll(cur.children)]\n                      : [...acc, cur]\n                  , [])\n              }(ans))\n            default:\n              return ans\n          }\n    };\n\n    //设置节点的选中与否状态\n    setNodeStatus = (node, checked) => {\n        const setChildChecked = (node, checked) => {\n            if(node.children) node.children.forEach(child => setChildChecked(child, checked));\n            node.checked = checked;\n            node.indeterminate = false;\n        }\n\n    /**\n     * @param {Object} node 节点\n     * @description 递归向上设置父节点的选中状态，并进行相关操作（根节点选中后移除 value 中的子节点）\n     * 当前节点变更\n     * ├── 未选 -> 已选\n     * │   ├── 父节点半选 -> 半选, value.add(child)\n     * │   ├── 父节点未选 -> 半选, value.add(child)\n     * │   ├── 父节点未选 -> 已选, value.add(parent), value.remove(children)\n     * │   └── 父节点半选 -> 已选, value.add(parent), value.remove(children)\n     * └── 已选 -> 未选\n     *     ├── 父节点半选 -> 半选, value.remove(children)\n     *     ├── 父节点半选 -> 未选, value.remove(children)\n     *     ├── 父节点已选 -> 未选, value.remove(children), value.remove(parent)\n     *     └── 父节点已选 -> 半选, value.remove(children), value.remove(parent)\n     */\n        const setParentChecked = (node, checked) => {\n            let current = node;\n            while(current.parent) {\n                let isHalf = current.parent.children.some(item => item.checked !== checked || item.indeterminate)\n\n                current.parent.checked = isHalf ? false : checked;\n                current.parent.indeterminate = isHalf\n\n                current = current.parent\n            }\n        }\n\n        node.checked = checked;\n        setChildChecked(node, checked)\n        setParentChecked(node, checked)\n        const { treeData } = this.state\n        const value = this.getSelectedNodeList(treeData, this.props.showCheckedStrategy)\n        this.setState({\n            treeData,\n            value\n        })\n    }\n\n    // 构造tree\n    generateTree = (treeData) => {\n        return (\n            <ul>\n                {\n                    treeData.map(node => (\n                        node.hit && <li>\n                            {\n                                Array.isArray(node.children)\n                                ? node.expand\n                                    ? <DownOutlined onClick={() => this.toggleExpand(node, !node.expand)}/>\n                                    : <RightOutlined onClick={() => this.toggleExpand(node, !node.expand)}/>\n                                : null\n                            }\n                            <Checkbox\n                                checked={node.checked}\n                                indeterminate={node.indeterminate}\n                                onChange={() => this.setNodeStatus(node, !node.checked)}\n                            >\n                                {node.title}\n                            </Checkbox>\n                            {\n                                node.expand && node.children && node.children[0] && this.generateTree(node.children)\n                            }\n                        </li>\n                    ))\n                }\n            </ul>\n        )\n    }\n\n    toggleExpand (node, expand) {\n        // 这里 不该这样的 但是我实在懒得再去遍历一次了\n        node.expand = expand\n        const { treeData } = this.state\n        this.setState({\n          treeData\n        })\n      }\n\n    render () {\n        const { treeData} = this.state;\n        return (\n            <div>\n                {\n                    this.generateTree(treeData)\n                }\n            </div>\n        )\n    }\n};\n\nTreeSelect.propTypes = {\n    allowClear: Boolean,\n    placeholder: String,\n    searchPlaceholder: String,\n    showCheckedStrategy: String,\n    dropDownStyle: Object,\n    style: Object,\n    treeData: Array,\n    value: Array,\n    searchRange: Array,\n    onChange: Function,\n    filterTreeNode: Function\n}\nexport default TreeSelect;"]},"metadata":{},"sourceType":"module"}