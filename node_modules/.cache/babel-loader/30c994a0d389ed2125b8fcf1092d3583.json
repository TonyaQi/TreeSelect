{"ast":null,"code":"var _jsxFileName = \"/Users/qitong/\\u7EC3\\u4E60/TreeSelect/src/TreeSelect/index.js\";\nimport React from 'react';\nimport { Checkbox } from 'antd';\nimport { DownOutlined, RightOutlined } from '@ant-design/icons';\nimport clone from '../utils/index';\n\nclass TreeSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleExpand = (node, expand) => {\n      node.expand = expand;\n      this.forceUpdate();\n    };\n\n    this.makeChildren = (node, checked, value) => {\n      let que = [node];\n\n      while (que.length) {\n        let cur = que.shift();\n\n        if (cur.children && cur.children.length > 0) {\n          cur.children.forEach(item => {\n            if (item.checked !== checked) que.push(item);\n          });\n        }\n\n        cur.checked = checked;\n\n        if (checked) {\n          value.push({\n            title: cur.title,\n            key: cur.key\n          });\n        }\n      }\n    };\n\n    this.setNodeStatus = (node, checked) => {\n      let value = [];\n      node.checked = checked;\n      this.makeChildren(node, checked, value);\n      this.makeParent(node, checked, value);\n      this.forceUpdate();\n    };\n\n    this.generateTree = (data, lastNode) => {\n      if (!data || data.length < 1) return null;\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        style: {\n          display: !lastNode || lastNode.expand ? 'block' : 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }\n      }, data.map(item => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }\n        }, Array.isArray(item.children) ? item.expand ? /*#__PURE__*/React.createElement(DownOutlined, {\n          onClick: () => this.toggleExpand(item, !item.expand),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }\n        }) : /*#__PURE__*/React.createElement(RightOutlined, {\n          onClick: () => this.toggleExpand(item, !item.expand),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 35\n          }\n        }) : null, /*#__PURE__*/React.createElement(Checkbox, {\n          checked: item.checked,\n          indeterminate: item.indeterminate,\n          onChange: () => this.setNodeStatus(item, !item.checked),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }\n        }, item.title), this.generateTree(item.children, item));\n      }));\n    };\n\n    this.data = clone(props.data);\n\n    const makeData = node => {\n      if (node && node.children) {\n        node.children.forEach(item => {\n          item.parent = node;\n          makeData(item);\n        });\n      }\n    };\n\n    this.data.forEach(item => {\n      makeData(item);\n    });\n    this.state = {\n      value: []\n    };\n  }\n\n  render() {\n    console.log(this.data);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, this.generateTree(this.data));\n  }\n\n}\n\n;\nTreeSelect.propTypes = {\n  allowClear: Boolean,\n  placeholder: String,\n  searchPlaceholder: String,\n  showCheckedStrategy: String,\n  dropDownStyle: Object,\n  style: Object,\n  treeData: Array,\n  value: Array,\n  searchRange: Array,\n  onChange: Function,\n  filterTreeNode: Function\n};\nexport default TreeSelect;","map":{"version":3,"sources":["/Users/qitong/ç»ƒä¹ /TreeSelect/src/TreeSelect/index.js"],"names":["React","Checkbox","DownOutlined","RightOutlined","clone","TreeSelect","Component","constructor","props","toggleExpand","node","expand","forceUpdate","makeChildren","checked","value","que","length","cur","shift","children","forEach","item","push","title","key","setNodeStatus","makeParent","generateTree","data","lastNode","display","map","Array","isArray","indeterminate","makeData","parent","state","render","console","log","propTypes","allowClear","Boolean","placeholder","String","searchPlaceholder","showCheckedStrategy","dropDownStyle","Object","style","treeData","searchRange","onChange","Function","filterTreeNode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Checkbox} from 'antd';\nimport {DownOutlined, RightOutlined} from '@ant-design/icons';\nimport clone from '../utils/index';\n\nclass TreeSelect extends React.Component{\n    \n    constructor(props) {\n        super(props);\n        this.data = clone(props.data)\n        const makeData = (node) => {\n            if(node && node.children) {\n                node.children.forEach(item => {\n                    item.parent = node;\n                    makeData(item);\n                })\n            }\n        }\n        this.data.forEach(item => {\n            makeData(item);\n        })\n\n        this.state = {\n            value: []\n        }\n    }\n\n\n    toggleExpand = (node, expand) => {\n        node.expand = expand;\n        this.forceUpdate();\n    }\n\n    makeChildren = (node, checked, value) => {\n        let que = [node];\n        while(que.length) {\n            let cur = que.shift();\n            if(cur.children && cur.children.length > 0 ) {\n                cur.children.forEach(item => {\n                    if(item.checked !== checked)\n                    que.push(item);\n                })\n            } \n            cur.checked = checked;\n            if(checked) {\n                value.push({\n                    title: cur.title,\n                    key: cur.key\n                })\n            }\n        }\n    }\n\n    setNodeStatus = (node, checked) => {\n        let value = [];\n        node.checked = checked;\n        this.makeChildren(node, checked, value);\n        this.makeParent(node, checked, value);\n        this.forceUpdate();\n    }\n\n    generateTree = (data, lastNode) => {\n        if(!data || data.length < 1) return null;\n        return (\n            <ul \n                style={{\n                    display: (!lastNode || lastNode.expand) ? 'block' : 'none'\n                }}\n            >\n                {\n                    data.map(item => {\n                        return (\n                            <li>\n                            {\n                                Array.isArray(item.children) \n                                ? item.expand ? \n                                <DownOutlined onClick={() => this.toggleExpand(item, !item.expand)}/>\n                                : <RightOutlined onClick={() => this.toggleExpand(item, !item.expand)}/>\n                                : null\n                            }\n                            <Checkbox\n                                checked={item.checked}\n                                indeterminate={item.indeterminate}\n                                onChange={() => this.setNodeStatus(item, !item.checked)}\n                            >\n                                {item.title}\n                            </Checkbox>\n                            {\n                                this.generateTree(item.children, item)\n                            }\n                        </li>\n                        )\n                    })\n                }\n            </ul>\n        )\n    };\n\n    render(){\n        console.log(this.data);\n        return (\n            <div>\n                {\n                    this.generateTree(this.data)\n                }\n            </div>\n        )\n    }\n};\n\nTreeSelect.propTypes = {\n    allowClear: Boolean,\n    placeholder: String,\n    searchPlaceholder: String,\n    showCheckedStrategy: String,\n    dropDownStyle: Object,\n    style: Object,\n    treeData: Array,\n    value: Array,\n    searchRange: Array,\n    onChange: Function,\n    filterTreeNode: Function\n}\nexport default TreeSelect;"]},"metadata":{},"sourceType":"module"}