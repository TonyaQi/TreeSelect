{"ast":null,"code":"var _jsxFileName = \"/Users/qitong/\\u7EC3\\u4E60/TreeSelect/src/TreeSelect/index.js\";\nimport React from 'react';\nimport { Checkbox } from 'antd';\nimport { DownOutlined, RightOutlined } from '@ant-design/icons';\nimport clone from '../utils/index';\n\nclass TreeSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleExpand = (node, expand) => {\n      node.expand = expand;\n      this.forceUpdate();\n    };\n\n    this.makeChildren = (node, checked) => {\n      let que = [node];\n\n      while (que.length) {\n        let cur = que.shift();\n\n        if (cur.children && cur.children.length > 0) {\n          cur.children.forEach(item => que.push(item));\n        }\n\n        cur.checked = checked;\n\n        if (checked) {}\n      }\n    };\n\n    this.setNodeStatus = (node, checked) => {\n      node.checked = checked;\n      this.makeChildren(node, checked);\n      this.forceUpdate();\n    };\n\n    this.generateTree = (data, lastNode) => {\n      if (!data || data.length < 1) return null;\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        style: {\n          display: !lastNode || lastNode.expand ? 'block' : 'none'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      }, data.map(item => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }\n        }, Array.isArray(item.children) ? item.expand ? /*#__PURE__*/React.createElement(DownOutlined, {\n          onClick: () => this.toggleExpand(item, !item.expand),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 33\n          }\n        }) : /*#__PURE__*/React.createElement(RightOutlined, {\n          onClick: () => this.toggleExpand(item, !item.expand),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 35\n          }\n        }) : null, /*#__PURE__*/React.createElement(Checkbox, {\n          checked: item.checked,\n          indeterminate: item.indeterminate,\n          onChange: () => this.setNodeStatus(item, !item.checked),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }\n        }, item.title), this.generateTree(item.children, item));\n      }));\n    };\n\n    this.data = clone(props.data);\n    this.state = {\n      value: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, this.generateTree(this.data));\n  }\n\n}\n\n;\nTreeSelect.propTypes = {\n  allowClear: Boolean,\n  placeholder: String,\n  searchPlaceholder: String,\n  showCheckedStrategy: String,\n  dropDownStyle: Object,\n  style: Object,\n  treeData: Array,\n  value: Array,\n  searchRange: Array,\n  onChange: Function,\n  filterTreeNode: Function\n};\nexport default TreeSelect;","map":{"version":3,"sources":["/Users/qitong/练习/TreeSelect/src/TreeSelect/index.js"],"names":["React","Checkbox","DownOutlined","RightOutlined","clone","TreeSelect","Component","constructor","props","toggleExpand","node","expand","forceUpdate","makeChildren","checked","que","length","cur","shift","children","forEach","item","push","setNodeStatus","generateTree","data","lastNode","display","map","Array","isArray","indeterminate","title","state","value","render","propTypes","allowClear","Boolean","placeholder","String","searchPlaceholder","showCheckedStrategy","dropDownStyle","Object","style","treeData","searchRange","onChange","Function","filterTreeNode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Checkbox} from 'antd';\nimport {DownOutlined, RightOutlined} from '@ant-design/icons';\nimport clone from '../utils/index';\n\nclass TreeSelect extends React.Component{\n    \n    constructor(props) {\n        super(props);\n        this.data = clone(props.data);\n        this.state = {\n            value: []\n        }\n    }\n\n\n    toggleExpand = (node, expand) => {\n        node.expand = expand;\n        this.forceUpdate();\n    }\n\n    makeChildren = (node, checked) => {\n        let que = [node];\n        while(que.length) {\n            let cur = que.shift();\n            if(cur.children && cur.children.length > 0 ) {\n                cur.children.forEach(item => que.push(item))\n            } \n            cur.checked = checked;\n            if(checked) {\n\n            }\n        }\n    }\n\n    setNodeStatus = (node, checked) => {\n        node.checked = checked;\n        this.makeChildren(node, checked);\n        this.forceUpdate();\n    }\n\n    generateTree = (data, lastNode) => {\n        if(!data || data.length < 1) return null;\n        return (\n            <ul \n                style={{\n                    display: (!lastNode || lastNode.expand) ? 'block' : 'none'\n                }}\n            >\n                {\n                    data.map(item => {\n                        return (\n                            <li>\n                            {\n                                Array.isArray(item.children) \n                                ? item.expand ? \n                                <DownOutlined onClick={() => this.toggleExpand(item, !item.expand)}/>\n                                : <RightOutlined onClick={() => this.toggleExpand(item, !item.expand)}/>\n                                : null\n                            }\n                            <Checkbox\n                                checked={item.checked}\n                                indeterminate={item.indeterminate}\n                                onChange={() => this.setNodeStatus(item, !item.checked)}\n                            >\n                                {item.title}\n                            </Checkbox>\n                            {\n                                this.generateTree(item.children, item)\n                            }\n                        </li>\n                        )\n                    })\n                }\n            </ul>\n        )\n    };\n\n    render(){\n        return (\n            <div>\n                {\n                    this.generateTree(this.data)\n                }\n            </div>\n        )\n    }\n};\n\nTreeSelect.propTypes = {\n    allowClear: Boolean,\n    placeholder: String,\n    searchPlaceholder: String,\n    showCheckedStrategy: String,\n    dropDownStyle: Object,\n    style: Object,\n    treeData: Array,\n    value: Array,\n    searchRange: Array,\n    onChange: Function,\n    filterTreeNode: Function\n}\nexport default TreeSelect;"]},"metadata":{},"sourceType":"module"}