{"ast":null,"code":"/**\n * @reference https://stackoverflow.com/questions/40291987/javascript-deep-clone-object-with-circular-references\n */\nexport default function clone(obj, hash = new WeakMap()) {\n  // Do not try to clone primitives or functions\n  let result;\n  if (Object(obj) !== obj || obj instanceof Function) return obj;\n  if (hash.has(obj)) return hash.get(obj); // Cyclic reference\n\n  try {\n    // Try to run constructor (without arguments, as we don't know them)\n    result = new obj.constructor();\n  } catch (e) {\n    // Constructor failed, create object without running the constructor\n    result = Object.create(Object.getPrototypeOf(obj));\n  } // Optional: support for some standard constructors (extend as desired)\n\n\n  if (obj instanceof Map) Array.from(obj, ([key, val]) => result.set(clone(key, hash), clone(val, hash)));else if (obj instanceof Set) Array.from(obj, key => result.add(clone(key, hash))); // Register in hash\n\n  hash.set(obj, result); // Clone and assign enumerable own properties recursively\n\n  return Object.assign(result, ...Object.entries(obj).map(([k, v]) => ({\n    [k]: clone(v, hash)\n  })));\n}","map":{"version":3,"sources":["/Users/qitong/练习/TreeSelect/src/utils/index.js"],"names":["clone","obj","hash","WeakMap","result","Object","Function","has","get","constructor","e","create","getPrototypeOf","Map","Array","from","key","val","set","Set","add","assign","entries","map","k","v"],"mappings":"AAAA;;;AAGA,eAAe,SAASA,KAAT,CAAgBC,GAAhB,EAAqBC,IAAI,GAAG,IAAIC,OAAJ,EAA5B,EAA2C;AACtD;AACA,MAAIC,MAAJ;AACA,MAAIC,MAAM,CAACJ,GAAD,CAAN,KAAgBA,GAAhB,IAAuBA,GAAG,YAAYK,QAA1C,EAAoD,OAAOL,GAAP;AACpD,MAAIC,IAAI,CAACK,GAAL,CAASN,GAAT,CAAJ,EAAmB,OAAOC,IAAI,CAACM,GAAL,CAASP,GAAT,CAAP,CAJmC,CAId;;AACxC,MAAI;AAAE;AACJG,IAAAA,MAAM,GAAG,IAAIH,GAAG,CAACQ,WAAR,EAAT;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AAAE;AACZN,IAAAA,MAAM,GAAGC,MAAM,CAACM,MAAP,CAAcN,MAAM,CAACO,cAAP,CAAsBX,GAAtB,CAAd,CAAT;AACD,GATqD,CAUtD;;;AACA,MAAIA,GAAG,YAAYY,GAAnB,EAAwBC,KAAK,CAACC,IAAN,CAAWd,GAAX,EAAgB,CAAC,CAACe,GAAD,EAAMC,GAAN,CAAD,KAAgBb,MAAM,CAACc,GAAP,CAAWlB,KAAK,CAACgB,GAAD,EAAMd,IAAN,CAAhB,EAA6BF,KAAK,CAACiB,GAAD,EAAMf,IAAN,CAAlC,CAAhC,EAAxB,KACK,IAAID,GAAG,YAAYkB,GAAnB,EAAwBL,KAAK,CAACC,IAAN,CAAWd,GAAX,EAAiBe,GAAD,IAASZ,MAAM,CAACgB,GAAP,CAAWpB,KAAK,CAACgB,GAAD,EAAMd,IAAN,CAAhB,CAAzB,EAZyB,CAatD;;AACAA,EAAAA,IAAI,CAACgB,GAAL,CAASjB,GAAT,EAAcG,MAAd,EAdsD,CAetD;;AACA,SAAOC,MAAM,CAACgB,MAAP,CACLjB,MADK,EAEL,GAAGC,MAAM,CAACiB,OAAP,CAAerB,GAAf,EAAoBsB,GAApB,CAAwB,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,MAAa;AACtC,KAACD,CAAD,GAAKxB,KAAK,CAACyB,CAAD,EAAIvB,IAAJ;AAD4B,GAAb,CAAxB,CAFE,CAAP;AAMD","sourcesContent":["/**\n * @reference https://stackoverflow.com/questions/40291987/javascript-deep-clone-object-with-circular-references\n */\nexport default function clone (obj, hash = new WeakMap()) {\n    // Do not try to clone primitives or functions\n    let result\n    if (Object(obj) !== obj || obj instanceof Function) return obj\n    if (hash.has(obj)) return hash.get(obj) // Cyclic reference\n    try { // Try to run constructor (without arguments, as we don't know them)\n      result = new obj.constructor()\n    } catch (e) { // Constructor failed, create object without running the constructor\n      result = Object.create(Object.getPrototypeOf(obj))\n    }\n    // Optional: support for some standard constructors (extend as desired)\n    if (obj instanceof Map) Array.from(obj, ([key, val]) => result.set(clone(key, hash), clone(val, hash)))\n    else if (obj instanceof Set) Array.from(obj, (key) => result.add(clone(key, hash)))\n    // Register in hash\n    hash.set(obj, result)\n    // Clone and assign enumerable own properties recursively\n    return Object.assign(\n      result,\n      ...Object.entries(obj).map(([k, v]) => ({\n        [k]: clone(v, hash)\n      }))\n    )\n  }\n  "]},"metadata":{},"sourceType":"module"}